#! /usr/bin/env ruby
# failirc, a fail IRC server.
#
# Copyleft meh. [http://meh.doesntexist.org | meh.ffff@gmail.com]
#
# This file is part of failirc.
#
# failirc is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# failirc is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with failirc. If not, see <http://www.gnu.org/licenses/>.

require 'failirc/client'
require 'getoptlong'
require 'uri'
require 'net/http'
require 'timeout'

args = GetoptLong.new(
    ['--version', '-v', GetoptLong::NO_ARGUMENT],
    ['--verbose', '-V', GetoptLong::NO_ARGUMENT],
    ['--config', '-f', GetoptLong::REQUIRED_ARGUMENT]
)

options = {
    :verbose => false,
    :config  => '/etc/failbot.conf',
}

args.each {|option, value|
    case option

    when '--version'
        puts "Fail IRCd #{IRC::VERSION}"
        exit 0

    when '--verbose'
        options[:verbose] = true

    when '--config'
        options[:config] = value

    end
}

$client = IRC::Client.new(File.new(options[:config]), options[:verbose])

def stop (client)
    client.stop
    Process.exit!(0)
end

trap('INT') { stop $client }
trap('KILL') { stop $client }

$urls = {}

module Commands
    def self.quit (server, from, to, string)
        $client.servers.each_value {|server|
            $client.execute :quit, server, string
        }

        self.debug 'Quitting...'

        while true
            if $client.servers.empty?
                Process.exit!(0)
            end

            sleep 0.1
        end
    end

    def self.echo (server, from, to, string)
        if !to.is_a?(IRC::Client::Channel)
            to = from
        end

        $client.execute :message, server, :output, $client, to, string
    end

    def self.urls (server, from, to, string)
        if !to.is_a?(IRC::Client::Channel)
            to = from
        end

        $urls.each_value {|url|
            $client.execute :message, server, :output, $client, to, "[#{url[:at]}] #{url[:uri]} { #{url[:from]} }"
        }
    end
end

# check for connection
$client.register :custom, :connected, lambda {|server|
    $client.config.elements.each('config/misc/channels/channel') {|channel|
        $client.execute :join, server, channel.text
    }
}

# fetch URLs
$client.register :custom, :message, lambda {|server, chain, from, to, message|
    if chain != :input
        return
    end

    URI.extract(message).each {|uri|
        if match = uri.match('http://tinyurl.com/(.+)$')
            uri = timeout 5 do
                Net::HTTP.get(URI.parse("http://preview.tinyurl.com/#{match[1]}"))
            end rescue nil

            if !uri
                next
            end

            if match = uri.match(/redirecturl" href="(.+?)"/)
                uri = URI.decode(match[1])
            else
                next
            end
        end

        if $urls[uri]
            next
        end

        $urls[uri] = {
            :from => from.mask.to_s,
            :to   => to.to_s,
            :uri  => uri,
            :at   => Time.now,
        }
    }
}

# dispatch commands
$client.register :custom, :message, lambda {|server, chain, from, to, message|
    if chain != :input
        return
    end
    
    if match = message.match(/^~([^ ]+)(\s+(.*))?$/)
        Commands.method(match[1].to_sym).call(server, from, to, match[3])
    end
}

$client.start
