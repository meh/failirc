#! /usr/bin/env ruby
# failirc, a fail IRC server.
#
# Copyleft meh. [http://meh.doesntexist.org | meh.ffff@gmail.com]
#
# This file is part of failirc.
#
# failirc is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# failirc is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with failirc. If not, see <http://www.gnu.org/licenses/>.

require 'failirc/server'
require 'getoptlong'

args = GetoptLong.new(
    ['--version', '-v', GetoptLong::NO_ARGUMENT],
    ['--verbose', '-V', GetoptLong::NO_ARGUMENT],
    ['--config', '-f', GetoptLong::REQUIRED_ARGUMENT]
)

options = {
    :verbose => false,
    :config  => '/etc/failirclient.conf',
}

args.each {|option, value|
    case option

    when '--version'
        puts "Fail IRCd #{IRC::VERSION}"
        exit 0

    when '--verbose'
        options[:verbose] = true

    when '--config'
        options[:config] = value

    end
}

client = IRC::Client.new(File.new(options[:config]), options[:verbose])

def stop (client)
    client.stop
    Process.exit!(0)
end

trap('INT') { stop client }
trap('KILL') { stop client }

client.register :custom, :numeric, lambda {|server, number, message|
    # end of MOTD or no MOTD, hence concluded connection.
    if number != 376 && number != 422
        return
    end

    client.execute :join, server, '#fail'
}

client.start
